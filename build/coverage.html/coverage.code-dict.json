{"/home/travis/build/npmtest/node-npmtest-client-session/test.js":"/* istanbul instrument in package npmtest_client_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-client-session/lib.npmtest_client_session.js":"/* istanbul instrument in package npmtest_client_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_client_session = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_client_session = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-client-session/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-client-session && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_client_session */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_client_session\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_client_session.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_client_session.rollup.js'] =\n            local.assetsDict['/assets.npmtest_client_session.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_client_session.__dirname + '/lib.npmtest_client_session.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-client-session/node_modules/client-session/index.js":"var csession = require('./lib/client_session.js')\r\nmodule.exports = csession","/home/travis/build/npmtest/node-npmtest-client-session/node_modules/client-session/lib/client_session.js":"var csession_cc = require('../build/Release/client_session.node');\r\nvar cookie = require('cookie');\r\nvar defaultSecretKey = 'nodeClientSession';\r\nvar csessionKey = 'csession';\r\nvar noopFunc = function(){};\r\nvar emptyObj = {};\r\nvar defaultOpt = {\r\n\tpath:'/',\r\n\tmaxAge:3600,\r\n\tsecure:false,\r\n\thttpOnly:true,\r\n};\r\n\r\nvar csessionFunc = function(secretKey,opt){\r\n\tvar secretKey = secretKey || defaultSecretKey; //set secretKey\r\n\tvar expireTime = parseInt(expireTime) || 0; //set expire time\r\n\tvar opt = opt || emptyObj;\r\n\r\n\tif(secretKey === defaultSecretKey){\r\n\t\tconsole.log('using defaultSecretKey is not safety,please using your own secretKey instead.');\r\n\t}\r\n\telse{ //check secretKey\r\n\t\tif(secretKey.length<6){\r\n\t\t\tthrow 'secretKey\\'s length must longer than 6.';\r\n\t\t}\r\n\t\tif(secretKey.length>64){\r\n\t\t\tthrow 'secretKey\\'s length must shorter than 64.';\r\n\t\t}\r\n\t\tif(!/^[\\w]+$/.test(secretKey)){\r\n\t\t\tthrow 'secretKey\\'s length must be Letters and Numbers.';\r\n\t\t}\r\n\t}\r\n\r\n\t//update default options\r\n\tvar tempOpt={}\r\n\tObject.keys(defaultOpt).forEach(function(key){\r\n\t\tif('undefined' !== typeof opt[key]){\r\n\t\t\ttempOpt[key] = opt[key];\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttempOpt[key] = defaultOpt[key];\r\n\t\t}\r\n\t})\r\n\r\n\topt = tempOpt;\r\n\t//console.log(opt)\r\n\tif(opt.maxAge < 0){ //check expire time\r\n\t\t\tthrow 'maxAge must be larger than 0  or equal 0, unit is second.';\r\n\t}\r\n\tif(!opt.secure===true && !opt.secure===false){ //check secure\r\n\t\t\tthrow 'secure must be a boolean.';\r\n\t}\r\n\r\n\tif(!opt.httpOnly === true && !opt.httpOnly === false){ //check httpOnly\r\n\t\t\tthrow 'httpOnly must be a boolean.';\r\n\t}\r\n\r\n\tvar csessionGet = function(req,res,cb){\r\n\t\tvar cb = cb || noopFunc;\r\n\t\tvar cookieHeader = req.headers.cookie; //get cookie str\r\n\r\n\t\tif(!cookieHeader){ //if no cookie\r\n\t\t\treq.csession = {};\r\n\t\t\treturn cb();\r\n\t\t}\r\n\t\t//parse cookie check if has csessionKey\r\n\t\tcsStr = cookie.parse(cookieHeader)[csessionKey];\r\n\r\n\t\t//if access first set init session\r\n\t\tif(!csStr){\r\n\t\t\treq.csession = {};\r\n\t\t\treturn cb();\r\n\t\t}\r\n\t\t//console.log(csStr,secretKey)\r\n\t\t//call c++ addon to check sign and deal session data\r\n\t\tcsession_cc.csessionGet(req,res,csStr,secretKey);\r\n\t\t//if check error\r\n\r\n\t\tif(!req.csession){\r\n\t\t\treq.csession = {}\r\n\t\t\treturn cb();\r\n\t\t}\r\n\t\ttry{\r\n\t\t\treq.csession = JSON.parse(req.csession);\r\n\t\t}\r\n\t\tcatch(e){\r\n\t\t\treq.csession = {};\r\n\t\t}\r\n\t\treturn cb();\r\n\t}\r\n\r\n\tvar csessionSet = function(req,res){\r\n\t\tvar csessionObj = req['csession'] || emptyObj;\r\n\t\tvar tempObj = {}\r\n\t\t//delete one level null\r\n\t\tObject.keys(csessionObj).forEach(function(sessionKey){\r\n\t\t\tif(csessionObj[sessionKey] == null || typeof csessionObj[sessionKey] == 'undefined'){\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\ttempObj[sessionKey] = csessionObj[sessionKey]\r\n\t\t})\r\n\r\n\t\tvar jsonStr = JSON.stringify(tempObj);//gen session json string\r\n\r\n\t\t//call c++ addon sign and encrypt the session str\r\n\t\tcsession_cc.csessionSet(req,res,jsonStr,secretKey);\r\n\t\t//generate cookie string\r\n\t\t//set cookie options\r\n\t\tvar seesionOpt = {\r\n\t\t\t\tpath:opt.path,\r\n\t\t\t\tsecure:opt.secure,\r\n\t\t\t\thttpOnly:opt.httpOnly,\r\n\t\t}\r\n\t\t//if maxAge is bigger than 0,set maxAge and expire\r\n\t\tif(opt.maxAge>0){\r\n\t\t\tseesionOpt.maxAge = opt.maxAge;\r\n\t\t\tvar expire = Date.now() + opt.maxAge*1000;\r\n\t\t\tseesionOpt.expires = new Date(expire);\r\n\t\t}\r\n\t\t//console.log(seesionOpt)\r\n\t\tcsessionStr = cookie.serialize(csessionKey, res['_csession_str'], seesionOpt);\r\n\t\t\r\n\t\t//set cookie string into response headers\r\n\t\tvar prev = res.getHeader('Set-Cookie');\r\n\t    if (prev) {\r\n\t\t    if (Array.isArray(prev)) {\r\n\t\t      csessionStr = prev.concat(csessionStr);\r\n\t\t    } else {\r\n\t\t      csessionStr = [prev, csessionStr];\r\n\t\t    }\r\n\t    }\r\n\t    res.setHeader('Set-Cookie', csessionStr);\r\n\r\n\t}\r\n\r\n\t//middleware in express or connect\r\n\tvar csessionExpress = function() {\r\n\t\t  return function(req, res, next) {\r\n\t\t  \tres.csflush = req.csflush = function(){\r\n\t\t  \t\tcsessionSet(req,res);\r\n\t\t  \t};\t\t    \r\n\t\t    csessionGet(req,res,next);\r\n\t\t  }\r\n\t}\r\n\r\n\treturn {\r\n\t\tcsget:csessionGet,\r\n\t\tcsset:csessionSet,\r\n\t\tconnect:csessionExpress,\r\n\t\topt:opt,\r\n\t}\r\n\t\r\n}\r\n\r\nmodule.exports = csessionFunc;","/home/travis/build/npmtest/node-npmtest-client-session/node_modules/client-session/benchmark/benchmark_clinet_session_express.js":"var cluster = require('cluster');\r\nvar numCPUs = require('os').cpus().length;\r\n\r\nif (cluster.isMaster) {\r\n  // Fork workers.\r\n  for (var i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n\r\n  cluster.on('exit', function(worker, code, signal) {\r\n    console.log('worker ' + worker.process.pid + ' died');\r\n  });\r\n} else {\r\n\r\n    var express = require('express');\r\n    var path = require('path')\r\n    var cs = require('../index.js'); \r\n    //in your code this wil be \r\n    //var cs = require('client-session')\r\n    var clientSession = cs('mysecretkey');\r\n\r\n    var app = express();\r\n\r\n    app.use(clientSession.connect())\r\n\r\n    app.get('/', function(req, res){\r\n      var count = req.csession['count'];\r\n      if(!count){\r\n        count = 1\r\n      }\r\n      else{\r\n        count++\r\n      }\r\n      req.csession['count'] = count;\r\n      req.csession['username'] = '尊敬的访客';\r\n      res.cookie('mycookie','myvalue');\r\n      res.cookie('mycookie2','myvalue2');\r\n      res.cookie('mycookie3','myvalue3');\r\n      req.csflush() //sync to cookie session equal to res.csflush() \r\n      res.send(req.csession['username'] + ' : ' +count.toString() + '; work :'+ cluster.worker.id);\r\n\r\n    });\r\n\r\n\r\n    app.listen(8124);\r\n    console.log('Server running at http://127.0.0.1:8124/');\r\n\r\n\r\n\r\n}","/home/travis/build/npmtest/node-npmtest-client-session/node_modules/client-session/benchmark/benchmark_redis_session_express.js":"var cluster = require('cluster');\r\nvar numCPUs = require('os').cpus().length;\r\n\r\nif (cluster.isMaster) {\r\n  // Fork workers.\r\n  for (var i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n\r\n  cluster.on('exit', function(worker, code, signal) {\r\n    console.log('worker ' + worker.process.pid + ' died');\r\n  });\r\n} else {\r\n\r\n    var express = require('express');\r\n    var cookieParser = require('cookie-parser'); \r\n    var session = require('express-session')\r\n    var RedisStore = require('connect-redis')(session);\r\n    var path = require('path')\r\n    var cs = require('../index.js'); \r\n    //in your code this wil be \r\n    //var cs = require('client-session')\r\n    var clientSession = cs('mysecretkey');\r\n\r\n    var app = express();\r\n    app.use(cookieParser())\r\n    \r\n    app.use(session({ store: new RedisStore({\r\n      host:'127.0.0.1',\r\n      port :6379\r\n    }), secret: 'keyboard cat' }))\r\n\r\n\r\n    app.get('/', function(req, res){\r\n      var count = req.session['count'];\r\n      if(!count){\r\n        count = 1\r\n      }\r\n      else{\r\n        count++\r\n      }\r\n      req.session['count'] = count;\r\n      req.session['username'] = '尊敬的访客';\r\n      res.cookie('mycookie','myvalue');\r\n      res.cookie('mycookie2','myvalue2');\r\n      res.cookie('mycookie3','myvalue3');\r\n      res.send(req.session['username'] + ' : ' +count.toString() + '; work :'+ cluster.worker.id);\r\n\r\n    });\r\n\r\n    app.listen(8124);\r\n    console.log('Server running at http://127.0.0.1:8124/');\r\n\r\n\r\n\r\n}"}